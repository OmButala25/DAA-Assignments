import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

class Philosopher implements Runnable {
    private final String name;
    private final Semaphore leftChopstick;
    private final Semaphore rightChopstick;

    public Philosopher(String name, Semaphore leftChopstick, Semaphore rightChopstick) {
        this.name = name;
        this.leftChopstick = leftChopstick;
        this.rightChopstick = rightChopstick;
    }

    public void run() {
        try {
            while (true) {
                think();
                eat();
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            //about interrupt - calling the interrupt() method on the thread, breaks out the sleeping or waiting state throwing InterruptedException. If the thread is not in the sleeping or waiting state, calling the interrupt() method performs normal behaviour and doesn't interrupt the thread but sets the interrupt flag to true
        }
    }

    private void think() throws InterruptedException {
        System.out.println(name + " is thinking.");
        Thread.sleep(1000); // Simulate thinking time 1000ml=1sec
    }

    private void eat() throws InterruptedException {
        leftChopstick.acquire();
        rightChopstick.acquire();
        //The method acquire the permits from the semaphore, blocking until one is available, or the thread is interrupted. It reduces the number of available permits by 1.
        System.out.println(name + " is eating.");
        Thread.sleep(1000); // Simulate eating time
        rightChopstick.release();
        leftChopstick.release();
        //It releases a permit and returns it to the semaphore. It increments the number of available permits by 1. 
    }
}

public class ConcurrentDiningPhilosopher {
    private static final int NUM_PHILOSOPHERS = 5;

    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(NUM_PHILOSOPHERS);
        //Java ExecutorService is the interface which allows us to execute tasks on threads asynchronously.
        //The newFixedThreadPool() method of Executors class creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue. At any point, at most n Threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available.
        Semaphore[] chopsticks = new Semaphore[NUM_PHILOSOPHERS];
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
            chopsticks[i] = new Semaphore(1);
        }

        Philosopher[] philosophers = new Philosopher[NUM_PHILOSOPHERS];
        for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
            philosophers[i] = new Philosopher("Philosopher " + (i + 1), chopsticks[i], chopsticks[(i + 1) % NUM_PHILOSOPHERS]);
            executorService.execute(philosophers[i]);
        }

        // Wait for a while to let the philosophers dine
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Shut down the executor service
        executorService.shutdownNow();
    }
}


// In this concurrent implementation, each philosopher is represented by a Runnable and executed by an ExecutorService. The Semaphore class is used to represent the chopsticks, with each chopstick having an initial permit of 1.

// The program creates a fixed-size thread pool with the number of philosophers as the pool size. Each philosopher acquires the left chopstick, then the right chopstick before eating. If any philosopher is interrupted during their execution (e.g., due to program termination), they will gracefully exit.

// After running for a certain duration (in this case, 10 seconds), the executor service is shut down, terminating all the philosopher threads.

// When you run this code, you will see the philosophers thinking and eating concurrently, ensuring that they can access the chopsticks without deadlock.

// Note: The program may not terminate automatically in all cases due to the interruption handling. You can adjust the sleep duration or modify the termination condition to meet your requirements.




//Concurrency is the ability to run several programs or several parts of a program in parallel. - concurrent
//The Java ExecutorService is the interface which allows us to execute tasks on threads asynchronously. The Java ExecutorService interface is present in the java. util. concurrent package. The ExecutorService helps in maintaining a pool of threads and assigns them tasks.
//provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc

//An executor is one who handles the wishes and instructions set out in a will. in OS

//Semaphores refer to the integer variables that are primarily used to solve the critical section problem via combining two of the atomic procedures, wait and signal, for the process synchronization.
//Semaphore is essentially a non-negative integer that is used to solve the critical section problem by acting as a signal.
//Semaphore in Java is a thread synchronization construct that avoids missed signals between threads by sending signals to the threads and protecting critical sections. With the use of counters, Semaphore manages access to the shared resources.
//Semaphore is used to restrict the number of threads that can access a resource. That is, while synchronized allows only one thread to aquire lock and execute the synchonized block / method, Semaphore gives permission up to n threads to go and blocks the others.